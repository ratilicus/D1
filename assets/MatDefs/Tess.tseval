/*
Height Map Tesselation Control Shader
By: Adam Dybczak

*/


#import "Common/ShaderLib/Instancing.glsllib"

layout (triangles) in;

uniform float m_HeightMultiplier;

in vec2 tcTexCoord[];
out vec2 texCoord;

in vec3 tcAmbientSum[];
in vec4 tcDiffuseSum[];
in vec3 tcSpecularSum[];

in vec3 tcViewDir[];
in vec4 tcLightDir[];
in vec3 tcNormal[];

out vec3 AmbientSum;
out vec4 DiffuseSum;
out vec3 SpecularSum;

out vec3 vViewDir;
out vec4 vLightDir;
out vec3 vNormal;

out vec3 p;
out vec3 pu;
out vec3 pv;
out vec3 pw;
out vec2 tu;
out vec2 tv;
out vec2 tw;

uniform sampler2D m_DiffuseMap;
uniform float m_SphereRadius;

float b_water = 0.55;

vec4 getHCR(sampler2D tex, vec2 tc, int loops) {
    vec4 c = texture2D(tex, tc);
    float m = 10.0;
    float d = 0.1;
    for (int i=1; i <= loops; i++) {
        vec3 sc = (texture2D(tex, fract(tc * m)).rgb-0.5) * d;
        c.rgb += vec3(sc[int(mod(i, 3))], sc[int(mod(i+1, 3))],sc[int(mod(i+2, 3))]);
        m *= 10.0;
        d /= 3.0;
    }
    return c;
}

float getHeight(sampler2D tex, vec2 tc) {
    float h = getHCR(tex, tc, 5).x;
    h = clamp(h, b_water, 1.0)-b_water;

    return 1.0+m_HeightMultiplier*h;
}

void main(){	

    texCoord = (
        gl_TessCoord.x * tcTexCoord[0]+
        gl_TessCoord.y * tcTexCoord[1]+
        gl_TessCoord.z * tcTexCoord[2]);

    gl_Position = (
        gl_TessCoord.x * gl_in[0].gl_Position +
        gl_TessCoord.y * gl_in[1].gl_Position +
        gl_TessCoord.z * gl_in[2].gl_Position);

    p = normalize(gl_Position.xyz);
    gl_Position.xyz = p * m_SphereRadius * getHeight(m_DiffuseMap, texCoord);

    AmbientSum = (
        gl_TessCoord.x * tcAmbientSum[0] +
        gl_TessCoord.y * tcAmbientSum[1] +
        gl_TessCoord.z * tcAmbientSum[2]);

    DiffuseSum = (
        gl_TessCoord.x * tcDiffuseSum[0] +
        gl_TessCoord.y * tcDiffuseSum[1] +
        gl_TessCoord.z * tcDiffuseSum[2]);

    SpecularSum = (
        gl_TessCoord.x * tcSpecularSum[0] +
        gl_TessCoord.y * tcSpecularSum[1] +
        gl_TessCoord.z * tcSpecularSum[2]);

    vViewDir = (
        gl_TessCoord.x * tcViewDir[0] +
        gl_TessCoord.y * tcViewDir[1] +
        gl_TessCoord.z * tcViewDir[2]);

    vLightDir = (
        gl_TessCoord.x * tcLightDir[0] +
        gl_TessCoord.y * tcLightDir[1] +
        gl_TessCoord.z * tcLightDir[2]);

    tu = tcTexCoord[0] - texCoord;
    tv = tcTexCoord[1] - texCoord;
    tw = tcTexCoord[2] - texCoord;
    pu = normalize(gl_in[0].gl_Position.xyz) - p;
    pv = normalize(gl_in[1].gl_Position.xyz) - p;
    pw = normalize(gl_in[2].gl_Position.xyz) - p;
    

    vNormal = normalize(TransformNormal(gl_Position.xyz));
    gl_Position = TransformWorldViewProjection(gl_Position);
}

